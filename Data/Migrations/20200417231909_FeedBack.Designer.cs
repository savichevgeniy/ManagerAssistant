// <auto-generated />
using System;
using ManagerAssistant.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace ManagerAssistant.Data.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20200417231909_FeedBack")]
    partial class FeedBack
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "3.1.3")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("ManagerAssistant.Client", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Adress")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FIO")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NameOrganization")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NuberTelephone")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Client");
                });

            modelBuilder.Entity("ManagerAssistant.Employee", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Adress")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("DataEmployment")
                        .HasColumnType("datetime2");

                    b.Property<string>("Discriminator")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FIO")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NumberTelephone")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Employee");

                    b.HasDiscriminator<string>("Discriminator").HasValue("Employee");
                });

            modelBuilder.Entity("ManagerAssistant.Models.FeedBack", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FIO")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Message")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("FeedBack");
                });

            modelBuilder.Entity("ManagerAssistant.Order", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CostProject")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("DateOrder")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeadLineProject")
                        .HasColumnType("datetime2");

                    b.Property<string>("OrderName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Order");
                });

            modelBuilder.Entity("ManagerAssistant.Project", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<double?>("AverageIncome")
                        .HasColumnType("float");

                    b.Property<Guid?>("ClientId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<double?>("Cost")
                        .HasColumnType("float");

                    b.Property<double?>("CostProject")
                        .HasColumnType("float");

                    b.Property<int?>("DayOnDev")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Discriminator")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("EployeeId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("IdClient")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("IdEmployee")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("IdLead")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("IdOrder")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int?>("Insurance")
                        .HasColumnType("int");

                    b.Property<string>("NameProject")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("OrderId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<double?>("PaymentForServers")
                        .HasColumnType("float");

                    b.Property<double?>("Profit")
                        .HasColumnType("float");

                    b.Property<int?>("QuantityPerson")
                        .HasColumnType("int");

                    b.Property<double?>("Rent")
                        .HasColumnType("float");

                    b.Property<string>("Status")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("TableForEmployeeId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<double?>("Tax")
                        .HasColumnType("float");

                    b.Property<int?>("TotalDeadline")
                        .HasColumnType("int");

                    b.Property<double?>("TotalIncome")
                        .HasColumnType("float");

                    b.HasKey("Id");

                    b.HasIndex("ClientId");

                    b.HasIndex("EployeeId");

                    b.HasIndex("OrderId");

                    b.HasIndex("TableForEmployeeId");

                    b.ToTable("Project");

                    b.HasDiscriminator<string>("Discriminator").HasValue("Project");
                });

            modelBuilder.Entity("ManagerAssistant.TableForEmployee", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Changes")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("DateEnd")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DateStart")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Discriminator")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("TableForEmployee");

                    b.HasDiscriminator<string>("Discriminator").HasValue("TableForEmployee");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedName")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedUserName")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(128)")
                        .HasMaxLength(128);

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(128)")
                        .HasMaxLength(128);

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(128)")
                        .HasMaxLength(128);

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(128)")
                        .HasMaxLength(128);

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens");
                });

            modelBuilder.Entity("ManagerAssistant.Designer", b =>
                {
                    b.HasBaseType("ManagerAssistant.Employee");

                    b.Property<string>("DesignerPosition")
                        .HasColumnType("nvarchar(max)");

                    b.Property<double?>("Salary")
                        .HasColumnType("float");

                    b.Property<string>("Status")
                        .HasColumnType("nvarchar(max)");

                    b.HasDiscriminator().HasValue("Designer");
                });

            modelBuilder.Entity("ManagerAssistant.Developer", b =>
                {
                    b.HasBaseType("ManagerAssistant.Employee");

                    b.Property<string>("DevPosition")
                        .HasColumnType("nvarchar(max)");

                    b.Property<double?>("Salary")
                        .HasColumnName("Developer_Salary")
                        .HasColumnType("float");

                    b.Property<string>("Status")
                        .HasColumnName("Developer_Status")
                        .HasColumnType("nvarchar(max)");

                    b.HasDiscriminator().HasValue("Developer");
                });

            modelBuilder.Entity("ManagerAssistant.OtherEmloyee", b =>
                {
                    b.HasBaseType("ManagerAssistant.Employee");

                    b.Property<string>("Position")
                        .HasColumnType("nvarchar(max)");

                    b.Property<double?>("Salare")
                        .HasColumnType("float");

                    b.Property<string>("Status")
                        .HasColumnName("OtherEmloyee_Status")
                        .HasColumnType("nvarchar(max)");

                    b.HasDiscriminator().HasValue("OtherEmloyee");
                });

            modelBuilder.Entity("ManagerAssistant.Tester", b =>
                {
                    b.HasBaseType("ManagerAssistant.Employee");

                    b.Property<double?>("Salary")
                        .HasColumnName("Tester_Salary")
                        .HasColumnType("float");

                    b.Property<string>("Status")
                        .HasColumnName("Tester_Status")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TesterPosition")
                        .HasColumnType("nvarchar(max)");

                    b.HasDiscriminator().HasValue("Tester");
                });

            modelBuilder.Entity("ManagerAssistant.AllProject", b =>
                {
                    b.HasBaseType("ManagerAssistant.Project");

                    b.Property<string>("CustomerEvaluatate")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DeadlineAccording")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Quality")
                        .HasColumnType("nvarchar(max)");

                    b.Property<double?>("TotalSum")
                        .HasColumnType("float");

                    b.HasDiscriminator().HasValue("AllProject");
                });

            modelBuilder.Entity("ManagerAssistant.TableForDesigners", b =>
                {
                    b.HasBaseType("ManagerAssistant.TableForEmployee");

                    b.Property<DateTime?>("DateWork")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("PervisionTerm")
                        .HasColumnType("datetime2");

                    b.Property<string>("StatmentColor")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TemplateDesign")
                        .HasColumnType("nvarchar(max)");

                    b.HasDiscriminator().HasValue("TableForDesigners");
                });

            modelBuilder.Entity("ManagerAssistant.TableForDeveloper", b =>
                {
                    b.HasBaseType("ManagerAssistant.TableForEmployee");

                    b.Property<DateTime?>("DateDev")
                        .HasColumnType("datetime2");

                    b.Property<string>("StepDev")
                        .HasColumnType("nvarchar(max)");

                    b.HasDiscriminator().HasValue("TableForDeveloper");
                });

            modelBuilder.Entity("ManagerAssistant.TableForTester", b =>
                {
                    b.HasBaseType("ManagerAssistant.TableForEmployee");

                    b.Property<DateTime>("DateTest")
                        .HasColumnType("datetime2");

                    b.Property<string>("IntegrationTest")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SystemTest")
                        .HasColumnType("nvarchar(max)");

                    b.HasDiscriminator().HasValue("TableForTester");
                });

            modelBuilder.Entity("ManagerAssistant.Project", b =>
                {
                    b.HasOne("ManagerAssistant.Client", "Client")
                        .WithMany("Project")
                        .HasForeignKey("ClientId");

                    b.HasOne("ManagerAssistant.Employee", "Eployee")
                        .WithMany("Project")
                        .HasForeignKey("EployeeId");

                    b.HasOne("ManagerAssistant.Order", "Order")
                        .WithMany("Project")
                        .HasForeignKey("OrderId");

                    b.HasOne("ManagerAssistant.TableForEmployee", "TableForEmployee")
                        .WithMany("Project")
                        .HasForeignKey("TableForEmployeeId");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
